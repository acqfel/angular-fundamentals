{"version":3,"sources":["webpack:///./src/app/not-found/not-found.component.html","webpack:///./src/app/git-search/git-search.component.html","webpack:///./src/app/app.component.css","webpack:///./src/app/home-page/home-page.component.html","webpack:///./src/app/home-page/home-page.component.css","webpack:///./src/app/git-search/git-search.component.css","webpack:///./src/app/not-found/not-found.component.css","webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.html","webpack:///./src/app/git-search.service.ts","webpack:///./src/app/app.component.ts","webpack:///./src/app/advanced-search-model.ts","webpack:///./src/app/git-search/git-search.component.ts","webpack:///./src/app/home-page/home-page.component.ts","webpack:///./src/app/not-found/not-found.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/main.ts"],"names":["module","exports","webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","id","git_search_service_GitSearchService","GitSearchService","http","_this","this","cachedValues","cachedValues2","gitSearch","query","reject","get","toPromise","response","error","gitUsers","__decorate","Object","core","app_component_AppComponent","AppComponent","title","prototype","ngOnInit","app_component_decorate","selector","providers","AdvancedSearchModel","q","language","user","size","stars","topic","git_search_component_GitSearchComponent","GitSearchComponent","route","router","formControls","model","modelKeys","searchQuery","searchResults","alert","statusText","sendQuery","search","form","value","params","forEach","elem","displayQuery","console","log","key","validators","push","fesm5_forms","required","maxLength","noSpecialChars","c","RegExp","test","validateEmail","valid","paramMap","subscribe","data","result","git_search_component_decorate","fesm5_router","home_page_component_HomePageComponent","HomePageComponent","home_page_component_decorate","not_found_component_NotFoundComponent","NotFoundComponent","not_found_component_decorate","appRoutes","path","component","redirectTo","pathMatch","app_module_AppModule","AppModule","app_module_decorate","declarations","imports","platform_browser","forRoot","bootstrap","platform_browser_dynamic","bootstrapModule","catch","err"],"mappings":"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","file":"main.js","sourcesContent":["module.exports = \"<h1>\\n  Oops! That page doesn't exist. Please select a link below.\\n</h1>\\n<nav>\\n  <a routerLink=\\\"/\\\" routerLinkActive=\\\"active\\\">\\n    <button>Home</button>\\n  </a>\\n  <a routerLink=\\\"/search\\\" routerLinkActive=\\\"active\\\">\\n    <button>Search For Repositories</button>\\n  </a>\\n</nav>\"","module.exports = \"<h3>{{title}} - {{displayQuery}}</h3>\\n\\n<form (ngSubmit)=\\\"sendQuery()\\\" [formGroup]=\\\"form\\\">\\n  <div *ngFor=\\\"let key of modelKeys\\\">\\n        {{key}}<input placeholder=\\\"Enter {{key}} Here\\\" formControlName=\\\"{{key}}\\\" />\\n  </div>\\n  <button type=\\\"submit\\\" [disabled]=\\\"!form.valid\\\">Submit</button>\\n  \\n  <!--<input name=\\\"query\\\" placeholder=\\\"Enter Search Here\\\" [(ngModel)]=\\\"searchQuery\\\" />-->\\n  <!--<button (click)=\\\"gitSearch()\\\">Submit</button>-->\\n  \\n</form>\\n<br />\\n\\n<div *ngIf=\\\"searchResults; else elseBlock\\\">\\n  <h3 class=\\\"total\\\">Total Results: {{searchResults.total_count}}</h3>\\n  \\n  <ul class=\\\"list\\\">\\n    <li [ngStyle]=\\\"{'background-color' : (i % 2 === 0) ? 'silver' : 'white'}\\\" \\n        class=\\\"list_item\\\" \\n        *ngFor=\\\"let result of searchResults.items; index as i;\\\">\\n      <a [href]=\\\"result.html_url\\\">\\n        <img class=\\\"avatar\\\" [src]=\\\"result.owner.avatar_url\\\" /> \\n        <h4 class=\\\"title\\\">{{result.name}} \\n          <small> by {{result.owner.login | uppercase}}</small> \\n        </h4>\\n      </a> \\n      <p class=\\\"description\\\"> {{result.description}}</p>\\n      <p> Created On: {{result.created_at | date:'fullDate'}} </p>\\n    </li>\\n  </ul>\\n</div>\\n<ng-template #elseBlock>Loading...</ng-template>\\n\"","module.exports = \"\"","module.exports = \"<h1>\\n  Welcome to the Angular Fundamentals Git Search!\\n</h1>\\n<nav>\\n  <a routerLink=\\\"/search\\\" routerLinkActive=\\\"active\\\">\\n    <button>Search For Repositories</button>\\n  </a>\\n</nav>\"","module.exports = \"\"","module.exports = \".total {\\n    font-size:24px;\\n}\\n.list {\\n    list-style-type: none;\\n}\\n.list_item {\\n    border: 1px solid black;\\n    height: 165px;\\n    margin-top: 20px;\\n    padding-top: 10px;\\n    padding-left: 10px;\\n}\\n.avatar {\\n    width:150px;\\n    height:150px;\\n    float:left;\\n}\\n.title {\\n    font-size:20px;\\n}\\n.description {\\n    font-size:18px;\\n}\\n.ng-valid  {\\n    border: 2px solid #42A948; /* green */\\n  }\\n.ng-invalid:not(form)  {\\n    border: 2px solid #a94442; /* red */\\n}\"","module.exports = \"\"","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"crnd\";","module.exports = \"<div style=\\\"text-align:center\\\">\\n  <router-outlet></router-outlet>\\n</div>\\n\\n\"","import { Injectable, Inject } from '@angular/core';\nimport { GitSearch } from './git-search';\nimport { GitUsers } from './git-users';\nimport { HttpClient } from '@angular/common/http';\n//import 'rxjs/add/operator/toPromise';\nimport 'rxjs/operators';\n\n@Injectable()\nexport class GitSearchService {\n  cachedValues: Array<{\n    [query: string]: GitSearch\n  }> = [];\n  \n  cachedValues2: Array<{\n      [query: string]: GitUsers\n  }> = [];\n  \n  constructor(private http: HttpClient) {\n      \n  }\n\n  gitSearch = (query: string): Promise<GitSearch> => {\n    let promise = new Promise<GitSearch>((resolve, reject) => {\n        if (this.cachedValues[query]) {\n            resolve(this.cachedValues[query])\n        }\n        else {\n            this.http.get('https://api.github.com/search/repositories?q=' + query)\n            .toPromise()\n            .then( (response) => {\n                resolve(response as GitSearch)\n            }, (error) => {\n                reject(error);\n            });\n        }\n    })\n    return promise;\n  }\n  \n  gitUsers = (query: string): Promise<GitUsers> => {\n    let promise = new Promise<GitUsers>((resolve, reject) => {\n        if (this.cachedValues2[query]) {\n            resolve(this.cachedValues2[query])\n        }\n        else {\n            this.http.get('https://api.github.com/search/users?q=' + query)\n            .toPromise()\n            .then( (response) => {\n                resolve(response as GitUsers)\n            }, (error) => {\n                reject(error);\n            })\n        }\n    })\n    return promise;\n  }\n}","import { Component, OnInit } from '@angular/core';\nimport { GitSearchService } from './git-search.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n  providers: [GitSearchService]\n})\n\nexport class AppComponent implements OnInit {\n  constructor (private GitSearchService : GitSearchService) {\n\n  }\n  \n  ngOnInit() {\n    \n    this.GitSearchService.gitUsers('tom').then( (response) => {\n      //alert(\"Total Users Found:\" + response.total_count);\n    }, (error) => {\n      //alert(\"Error: \" + error.statusText);\n    });\n  }\n  \n  title = 'GitHub Browser';\n}","export class AdvancedSearchModel {\n  constructor(\n    public q: string,\n    public language?: string,\n    public user?: string,\n    public size?: number,\n    public stars?: number,\n    public topic?: string\n    ) {\n  }\n}\n\n// ? ->  indicate that these variables are optional","import { Component, OnInit } from '@angular/core';\nimport { GitSearchService } from '../git-search.service';\nimport { GitSearch } from '../git-search';\nimport { ActivatedRoute, ParamMap, Router } from '@angular/router';\nimport { AdvancedSearchModel } from '../advanced-search-model';\nimport { FormControl, FormGroup, Validators  } from '@angular/forms';\n\n@Component({\n  selector: 'app-git-search',\n  templateUrl: './git-search.component.html',\n  styleUrls: ['./git-search.component.css']\n})\n\nexport class GitSearchComponent implements OnInit {\n  \n  searchResults: GitSearch;\n  searchQuery: string;\n  title: string;\n  displayQuery: string;\n  // form variables\n  form: FormGroup;\n  formControls = {};\n  \n  constructor(\n    private GitSearchService: GitSearchService, \n    private route: ActivatedRoute,\n    private router: Router\n    ) {\n      // create FormGroup\n      this.modelKeys.forEach( (key) => {\n        let validators = [];\n        if (key === 'q') {\n            validators.push(Validators.required);\n        }\n        if (key === 'stars') {\n            validators.push(Validators.maxLength(4));\n        }\n        validators.push(this.noSpecialChars);\n        \n        this.formControls[key] = new FormControl(this.model[key], validators);\n      });\n      this.form = new FormGroup(this.formControls);\n    }\n\n  model = new AdvancedSearchModel('', '', '', null, null, '');\n  modelKeys = Object.keys(this.model);\n  \n  noSpecialChars(c: FormControl) {\n    let REGEXP = new RegExp(/[~`!#$%\\^&*+=\\-\\[\\]\\\\';,/{}|\\\\\":<>\\?]/);\n\n    return REGEXP.test(c.value) ? {\n          validateEmail: {\n            valid: false\n          }\n      } : null;\n  }\n\n  ngOnInit() {\n    \n    this.route.paramMap.subscribe( (params: ParamMap) => {\n      this.searchQuery = params.get('query');\n      this.displayQuery = params.get('query');\n      this.gitSearch();\n    });\n    \n    // code to NO Dinamic Router - without /:query\n    /*\n    this.GitSearchService.gitSearch('angular').then( (response) => {\n      //alert(\"Total Libraries Found:\" + response.total_count);\n      this.searchResults = response;\n    }, (error) => {\n      alert(\"Error: \" + error.statusText)\n    });\n    */\n    \n    this.route.data.subscribe( (result) => {\n      this.title = result.title\n    });\n    \n  }\n  \n  gitSearch = () => {\n      this.GitSearchService.gitSearch(this.searchQuery).then((response) => {\n        this.searchResults = response;\n      }, (error) => {\n        alert(\"Error: \" + error.statusText)\n      });\n    }\n    \n  sendQuery = () => {\n    this.searchResults = null;\n    \n    //this.router.navigate(['/search/' + this.searchQuery]);\n    \n    //search query modified to git search advanced mode\n    // example - https://api.github.com/search/repositories?q=tetris+language:assembly\n    let search : string = this.form.value['q'];\n    let params : string = \"\";\n    this.modelKeys.forEach(  (elem) => {\n        if (elem === 'q') {\n            return false;\n        }\n        if (this.form.value[elem]) {\n            params += '+' + elem + ':' + this.form.value[elem];\n        }\n    });\n    \n    this.searchQuery = search;\n    if (params !== '') {\n        this.searchQuery = search + '+' + params;\n    }\n    \n    this.displayQuery = this.searchQuery;\n    console.log(this.form.value);\n    \n    // call gitSearch method - run the search on github\n    this.gitSearch();\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-home-page',\n  templateUrl: './home-page.component.html',\n  styleUrls: ['./home-page.component.css']\n})\nexport class HomePageComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-not-found',\n  templateUrl: './not-found.component.html',\n  styleUrls: ['./not-found.component.css']\n})\nexport class NotFoundComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\nimport { AppComponent } from './app.component';\nimport { GitSearchService } from './git-search.service';\nimport { GitSearchComponent } from './git-search/git-search.component';\nimport { HomePageComponent } from './home-page/home-page.component';\nimport { NotFoundComponent } from './not-found/not-found.component';\nimport { RouterModule, Routes } from '@angular/router';\n\nconst appRoutes: Routes = [\n  {\n    path: '',\n    component: HomePageComponent\n  },\n  {\n    path: 'search',\n    redirectTo: '/search/angular',\n    pathMatch: 'full'\n  },\n  {\n    path: 'search/:query',\n    component: GitSearchComponent,\n    data: { title: 'Git Search' }\n  },\n  { path: '**', component: NotFoundComponent }\n];\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    HomePageComponent,\n    NotFoundComponent,\n    GitSearchComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    HttpClientModule,\n    ReactiveFormsModule,\n    RouterModule.forRoot(appRoutes)\n  ],\n  providers: [GitSearchService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}